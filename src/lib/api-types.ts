/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/auth/csrf_token/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Get CSRF token for frontend */
        post: operations["api_auth_csrf_token_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/login/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Login with username/password, return session cookie and CSRF token */
        post: operations["api_auth_login_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/logout/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Logout and invalidate session */
        post: operations["api_auth_logout_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/me/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get current user information */
        get: operations["api_auth_me_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/categories/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_categories_list"];
        put?: never;
        post: operations["api_categories_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/categories/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_categories_retrieve"];
        put: operations["api_categories_update"];
        post?: never;
        delete: operations["api_categories_destroy"];
        options?: never;
        head?: never;
        patch: operations["api_categories_partial_update"];
        trace?: never;
    };
    "/api/comments/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_comments_list"];
        put?: never;
        post: operations["api_comments_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/comments/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_comments_retrieve"];
        put: operations["api_comments_update"];
        post?: never;
        delete: operations["api_comments_destroy"];
        options?: never;
        head?: never;
        patch: operations["api_comments_partial_update"];
        trace?: never;
    };
    "/api/pages/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Mixin to add optimistic locking support to ViewSets.
         *     Requires the model to have a 'version' field. */
        get: operations["api_pages_list"];
        put?: never;
        /** @description Mixin to add optimistic locking support to ViewSets.
         *     Requires the model to have a 'version' field. */
        post: operations["api_pages_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/pages/{slug}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Mixin to add optimistic locking support to ViewSets.
         *     Requires the model to have a 'version' field. */
        get: operations["api_pages_retrieve"];
        /** @description Mixin to add optimistic locking support to ViewSets.
         *     Requires the model to have a 'version' field. */
        put: operations["api_pages_update"];
        post?: never;
        /** @description Mixin to add optimistic locking support to ViewSets.
         *     Requires the model to have a 'version' field. */
        delete: operations["api_pages_destroy"];
        options?: never;
        head?: never;
        /** @description Mixin to add optimistic locking support to ViewSets.
         *     Requires the model to have a 'version' field. */
        patch: operations["api_pages_partial_update"];
        trace?: never;
    };
    "/api/pages/{slug}/raw/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Mixin to add optimistic locking support to ViewSets.
         *     Requires the model to have a 'version' field. */
        get: operations["api_pages_raw_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Mixin to add optimistic locking support to ViewSets.
         *     Requires the model to have a 'version' field. */
        get: operations["api_posts_list"];
        put?: never;
        /** @description Mixin to add optimistic locking support to ViewSets.
         *     Requires the model to have a 'version' field. */
        post: operations["api_posts_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Mixin to add optimistic locking support to ViewSets.
         *     Requires the model to have a 'version' field. */
        get: operations["api_posts_retrieve"];
        /** @description Mixin to add optimistic locking support to ViewSets.
         *     Requires the model to have a 'version' field. */
        put: operations["api_posts_update"];
        post?: never;
        /** @description Mixin to add optimistic locking support to ViewSets.
         *     Requires the model to have a 'version' field. */
        delete: operations["api_posts_destroy"];
        options?: never;
        head?: never;
        /** @description Mixin to add optimistic locking support to ViewSets.
         *     Requires the model to have a 'version' field. */
        patch: operations["api_posts_partial_update"];
        trace?: never;
    };
    "/api/v1/auth/csrf_token/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Get CSRF token for frontend */
        post: operations["api_v1_auth_csrf_token_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/login/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Login with username/password, return session cookie and CSRF token */
        post: operations["api_v1_auth_login_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/logout/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Logout and invalidate session */
        post: operations["api_v1_auth_logout_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/me/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get current user information */
        get: operations["api_v1_auth_me_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/categories/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_v1_categories_list"];
        put?: never;
        post: operations["api_v1_categories_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/categories/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_v1_categories_retrieve"];
        put: operations["api_v1_categories_update"];
        post?: never;
        delete: operations["api_v1_categories_destroy"];
        options?: never;
        head?: never;
        patch: operations["api_v1_categories_partial_update"];
        trace?: never;
    };
    "/api/v1/comments/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_v1_comments_list"];
        put?: never;
        post: operations["api_v1_comments_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/comments/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_v1_comments_retrieve"];
        put: operations["api_v1_comments_update"];
        post?: never;
        delete: operations["api_v1_comments_destroy"];
        options?: never;
        head?: never;
        patch: operations["api_v1_comments_partial_update"];
        trace?: never;
    };
    "/api/v1/pages/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Mixin to add optimistic locking support to ViewSets.
         *     Requires the model to have a 'version' field. */
        get: operations["api_v1_pages_list"];
        put?: never;
        /** @description Mixin to add optimistic locking support to ViewSets.
         *     Requires the model to have a 'version' field. */
        post: operations["api_v1_pages_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/pages/{slug}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Mixin to add optimistic locking support to ViewSets.
         *     Requires the model to have a 'version' field. */
        get: operations["api_v1_pages_retrieve"];
        /** @description Mixin to add optimistic locking support to ViewSets.
         *     Requires the model to have a 'version' field. */
        put: operations["api_v1_pages_update"];
        post?: never;
        /** @description Mixin to add optimistic locking support to ViewSets.
         *     Requires the model to have a 'version' field. */
        delete: operations["api_v1_pages_destroy"];
        options?: never;
        head?: never;
        /** @description Mixin to add optimistic locking support to ViewSets.
         *     Requires the model to have a 'version' field. */
        patch: operations["api_v1_pages_partial_update"];
        trace?: never;
    };
    "/api/v1/pages/{slug}/raw/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Mixin to add optimistic locking support to ViewSets.
         *     Requires the model to have a 'version' field. */
        get: operations["api_v1_pages_raw_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/posts/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Mixin to add optimistic locking support to ViewSets.
         *     Requires the model to have a 'version' field. */
        get: operations["api_v1_posts_list"];
        put?: never;
        /** @description Mixin to add optimistic locking support to ViewSets.
         *     Requires the model to have a 'version' field. */
        post: operations["api_v1_posts_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/posts/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Mixin to add optimistic locking support to ViewSets.
         *     Requires the model to have a 'version' field. */
        get: operations["api_v1_posts_retrieve"];
        /** @description Mixin to add optimistic locking support to ViewSets.
         *     Requires the model to have a 'version' field. */
        put: operations["api_v1_posts_update"];
        post?: never;
        /** @description Mixin to add optimistic locking support to ViewSets.
         *     Requires the model to have a 'version' field. */
        delete: operations["api_v1_posts_destroy"];
        options?: never;
        head?: never;
        /** @description Mixin to add optimistic locking support to ViewSets.
         *     Requires the model to have a 'version' field. */
        patch: operations["api_v1_posts_partial_update"];
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Auth: {
            username: string;
            password: string;
        };
        Category: {
            readonly id: number;
            name: string;
            slug?: string;
            parent?: number | null;
        };
        Comment: {
            readonly id: number;
            post: number;
            author: number;
            readonly author_username: string;
            parent?: number | null;
            content: string;
            readonly is_approved: boolean;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
            readonly replies: {
                [key: string]: unknown;
            }[];
        };
        PageDetail: {
            readonly id: number;
            title: string;
            slug?: string;
            content?: string;
            status?: components["schemas"]["StatusEnum"];
            /** Format: date-time */
            published_at?: string | null;
            readonly author: number | null;
            meta_title?: string;
            meta_description?: string;
            /** Format: uri */
            og_image?: string | null;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
            /** @description Version for optimistic locking */
            readonly version: number;
        };
        PageList: {
            readonly id: number;
            title: string;
            slug?: string;
            status?: components["schemas"]["StatusEnum"];
            /** Format: date-time */
            published_at?: string | null;
            meta_title?: string;
            meta_description?: string;
            /** Format: date-time */
            readonly updated_at: string;
        };
        PaginatedCategoryList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results: components["schemas"]["Category"][];
        };
        PaginatedCommentList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results: components["schemas"]["Comment"][];
        };
        PaginatedPageListList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results: components["schemas"]["PageList"][];
        };
        PaginatedPostList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results: components["schemas"]["Post"][];
        };
        PatchedCategory: {
            readonly id?: number;
            name?: string;
            slug?: string;
            parent?: number | null;
        };
        PatchedComment: {
            readonly id?: number;
            post?: number;
            author?: number;
            readonly author_username?: string;
            parent?: number | null;
            content?: string;
            readonly is_approved?: boolean;
            /** Format: date-time */
            readonly created_at?: string;
            /** Format: date-time */
            readonly updated_at?: string;
            readonly replies?: {
                [key: string]: unknown;
            }[];
        };
        PatchedPageDetail: {
            readonly id?: number;
            title?: string;
            slug?: string;
            content?: string;
            status?: components["schemas"]["StatusEnum"];
            /** Format: date-time */
            published_at?: string | null;
            readonly author?: number | null;
            meta_title?: string;
            meta_description?: string;
            /** Format: uri */
            og_image?: string | null;
            /** Format: date-time */
            readonly created_at?: string;
            /** Format: date-time */
            readonly updated_at?: string;
            /** @description Version for optimistic locking */
            readonly version?: number;
        };
        PatchedPost: {
            readonly id?: number;
            title?: string;
            readonly slug?: string;
            author?: number;
            readonly author_username?: string;
            content?: string;
            excerpt?: string;
            status?: components["schemas"]["StatusEnum"];
            /**
             * Format: date-time
             * @description When the post becomes public
             */
            published_at?: string | null;
            /** Format: date-time */
            readonly created_at?: string;
            /** Format: date-time */
            readonly updated_at?: string;
            /** @description Version for optimistic locking */
            readonly version?: number;
            /** Format: uri */
            cover_image?: string | null;
            readonly views_count?: number;
            readonly categories?: components["schemas"]["Category"][];
            category_ids?: number[];
            tags?: string[];
        };
        Post: {
            readonly id: number;
            title: string;
            readonly slug: string;
            author: number;
            readonly author_username: string;
            content: string;
            excerpt?: string;
            status?: components["schemas"]["StatusEnum"];
            /**
             * Format: date-time
             * @description When the post becomes public
             */
            published_at?: string | null;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
            /** @description Version for optimistic locking */
            readonly version: number;
            /** Format: uri */
            cover_image?: string | null;
            readonly views_count: number;
            readonly categories: components["schemas"]["Category"][];
            category_ids?: number[];
            tags?: string[];
        };
        /**
         * @description * `draft` - Draft
         *     * `published` - Published
         * @enum {string}
         */
        StatusEnum: "draft" | "published";
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    api_auth_csrf_token_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Auth"];
                "application/x-www-form-urlencoded": components["schemas"]["Auth"];
                "multipart/form-data": components["schemas"]["Auth"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Auth"];
                };
            };
        };
    };
    api_auth_login_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Auth"];
                "application/x-www-form-urlencoded": components["schemas"]["Auth"];
                "multipart/form-data": components["schemas"]["Auth"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Auth"];
                };
            };
        };
    };
    api_auth_logout_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Auth"];
                "application/x-www-form-urlencoded": components["schemas"]["Auth"];
                "multipart/form-data": components["schemas"]["Auth"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Auth"];
                };
            };
        };
    };
    api_auth_me_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Auth"];
                };
            };
        };
    };
    api_categories_list: {
        parameters: {
            query?: {
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description The initial index from which to return the results. */
                offset?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                parent?: number;
                /** @description A search term. */
                search?: string;
                slug?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedCategoryList"];
                };
            };
        };
    };
    api_categories_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Category"];
                "application/x-www-form-urlencoded": components["schemas"]["Category"];
                "multipart/form-data": components["schemas"]["Category"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Category"];
                };
            };
        };
    };
    api_categories_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this category. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Category"];
                };
            };
        };
    };
    api_categories_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this category. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Category"];
                "application/x-www-form-urlencoded": components["schemas"]["Category"];
                "multipart/form-data": components["schemas"]["Category"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Category"];
                };
            };
        };
    };
    api_categories_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this category. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_categories_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this category. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedCategory"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedCategory"];
                "multipart/form-data": components["schemas"]["PatchedCategory"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Category"];
                };
            };
        };
    };
    api_comments_list: {
        parameters: {
            query?: {
                author?: number;
                is_approved?: boolean;
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description The initial index from which to return the results. */
                offset?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                post?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedCommentList"];
                };
            };
        };
    };
    api_comments_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Comment"];
                "application/x-www-form-urlencoded": components["schemas"]["Comment"];
                "multipart/form-data": components["schemas"]["Comment"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Comment"];
                };
            };
        };
    };
    api_comments_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this comment. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Comment"];
                };
            };
        };
    };
    api_comments_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this comment. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Comment"];
                "application/x-www-form-urlencoded": components["schemas"]["Comment"];
                "multipart/form-data": components["schemas"]["Comment"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Comment"];
                };
            };
        };
    };
    api_comments_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this comment. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_comments_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this comment. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedComment"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedComment"];
                "multipart/form-data": components["schemas"]["PatchedComment"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Comment"];
                };
            };
        };
    };
    api_pages_list: {
        parameters: {
            query?: {
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description The initial index from which to return the results. */
                offset?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedPageListList"];
                };
            };
        };
    };
    api_pages_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PageDetail"];
                "application/x-www-form-urlencoded": components["schemas"]["PageDetail"];
                "multipart/form-data": components["schemas"]["PageDetail"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PageDetail"];
                };
            };
        };
    };
    api_pages_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PageDetail"];
                };
            };
        };
    };
    api_pages_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PageDetail"];
                "application/x-www-form-urlencoded": components["schemas"]["PageDetail"];
                "multipart/form-data": components["schemas"]["PageDetail"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PageDetail"];
                };
            };
        };
    };
    api_pages_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_pages_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedPageDetail"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedPageDetail"];
                "multipart/form-data": components["schemas"]["PatchedPageDetail"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PageDetail"];
                };
            };
        };
    };
    api_pages_raw_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PageDetail"];
                };
            };
        };
    };
    api_posts_list: {
        parameters: {
            query?: {
                author?: number;
                categories__id?: number;
                categories__slug?: string;
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description The initial index from which to return the results. */
                offset?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A search term. */
                search?: string;
                /** @description * `draft` - Draft
                 *     * `published` - Published */
                status?: "draft" | "published";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedPostList"];
                };
            };
        };
    };
    api_posts_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Post"];
                "application/x-www-form-urlencoded": components["schemas"]["Post"];
                "multipart/form-data": components["schemas"]["Post"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Post"];
                };
            };
        };
    };
    api_posts_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this post. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Post"];
                };
            };
        };
    };
    api_posts_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this post. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Post"];
                "application/x-www-form-urlencoded": components["schemas"]["Post"];
                "multipart/form-data": components["schemas"]["Post"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Post"];
                };
            };
        };
    };
    api_posts_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this post. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_posts_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this post. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedPost"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedPost"];
                "multipart/form-data": components["schemas"]["PatchedPost"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Post"];
                };
            };
        };
    };
    api_v1_auth_csrf_token_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Auth"];
                "application/x-www-form-urlencoded": components["schemas"]["Auth"];
                "multipart/form-data": components["schemas"]["Auth"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Auth"];
                };
            };
        };
    };
    api_v1_auth_login_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Auth"];
                "application/x-www-form-urlencoded": components["schemas"]["Auth"];
                "multipart/form-data": components["schemas"]["Auth"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Auth"];
                };
            };
        };
    };
    api_v1_auth_logout_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Auth"];
                "application/x-www-form-urlencoded": components["schemas"]["Auth"];
                "multipart/form-data": components["schemas"]["Auth"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Auth"];
                };
            };
        };
    };
    api_v1_auth_me_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Auth"];
                };
            };
        };
    };
    api_v1_categories_list: {
        parameters: {
            query?: {
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description The initial index from which to return the results. */
                offset?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                parent?: number;
                /** @description A search term. */
                search?: string;
                slug?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedCategoryList"];
                };
            };
        };
    };
    api_v1_categories_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Category"];
                "application/x-www-form-urlencoded": components["schemas"]["Category"];
                "multipart/form-data": components["schemas"]["Category"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Category"];
                };
            };
        };
    };
    api_v1_categories_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this category. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Category"];
                };
            };
        };
    };
    api_v1_categories_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this category. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Category"];
                "application/x-www-form-urlencoded": components["schemas"]["Category"];
                "multipart/form-data": components["schemas"]["Category"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Category"];
                };
            };
        };
    };
    api_v1_categories_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this category. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_v1_categories_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this category. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedCategory"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedCategory"];
                "multipart/form-data": components["schemas"]["PatchedCategory"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Category"];
                };
            };
        };
    };
    api_v1_comments_list: {
        parameters: {
            query?: {
                author?: number;
                is_approved?: boolean;
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description The initial index from which to return the results. */
                offset?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                post?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedCommentList"];
                };
            };
        };
    };
    api_v1_comments_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Comment"];
                "application/x-www-form-urlencoded": components["schemas"]["Comment"];
                "multipart/form-data": components["schemas"]["Comment"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Comment"];
                };
            };
        };
    };
    api_v1_comments_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this comment. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Comment"];
                };
            };
        };
    };
    api_v1_comments_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this comment. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Comment"];
                "application/x-www-form-urlencoded": components["schemas"]["Comment"];
                "multipart/form-data": components["schemas"]["Comment"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Comment"];
                };
            };
        };
    };
    api_v1_comments_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this comment. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_v1_comments_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this comment. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedComment"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedComment"];
                "multipart/form-data": components["schemas"]["PatchedComment"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Comment"];
                };
            };
        };
    };
    api_v1_pages_list: {
        parameters: {
            query?: {
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description The initial index from which to return the results. */
                offset?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedPageListList"];
                };
            };
        };
    };
    api_v1_pages_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PageDetail"];
                "application/x-www-form-urlencoded": components["schemas"]["PageDetail"];
                "multipart/form-data": components["schemas"]["PageDetail"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PageDetail"];
                };
            };
        };
    };
    api_v1_pages_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PageDetail"];
                };
            };
        };
    };
    api_v1_pages_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PageDetail"];
                "application/x-www-form-urlencoded": components["schemas"]["PageDetail"];
                "multipart/form-data": components["schemas"]["PageDetail"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PageDetail"];
                };
            };
        };
    };
    api_v1_pages_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_v1_pages_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedPageDetail"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedPageDetail"];
                "multipart/form-data": components["schemas"]["PatchedPageDetail"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PageDetail"];
                };
            };
        };
    };
    api_v1_pages_raw_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PageDetail"];
                };
            };
        };
    };
    api_v1_posts_list: {
        parameters: {
            query?: {
                author?: number;
                categories__id?: number;
                categories__slug?: string;
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description The initial index from which to return the results. */
                offset?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A search term. */
                search?: string;
                /** @description * `draft` - Draft
                 *     * `published` - Published */
                status?: "draft" | "published";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedPostList"];
                };
            };
        };
    };
    api_v1_posts_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Post"];
                "application/x-www-form-urlencoded": components["schemas"]["Post"];
                "multipart/form-data": components["schemas"]["Post"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Post"];
                };
            };
        };
    };
    api_v1_posts_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this post. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Post"];
                };
            };
        };
    };
    api_v1_posts_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this post. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Post"];
                "application/x-www-form-urlencoded": components["schemas"]["Post"];
                "multipart/form-data": components["schemas"]["Post"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Post"];
                };
            };
        };
    };
    api_v1_posts_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this post. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_v1_posts_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this post. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedPost"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedPost"];
                "multipart/form-data": components["schemas"]["PatchedPost"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Post"];
                };
            };
        };
    };
}
